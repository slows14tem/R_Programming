# plot() 함수에서 시계열 객체 사용하여 추세선 그리기
data("WWWusage")
str(WWWusage)
plot(WWWusage)     # plot.ts(WWWusage)와 같다.
# 실습: 중복된 자료의 수 만큼 점의 크기 확대하기
# 단계 1: 두 개의 벡터 객체 준비
x <- c(1, 2, 3, 4, 2, 4)
y <- rep( 2, 6)
x; y
# 단계 2: 교차 테이블 작성
table(x, y)
# 단계 3: 산점도 시각화
plot(x, y)
# 단계 4: 교차 테이블로 데이터프레임 생성
xy.df <- as.data.frame(table(x, y))
xy.df
help(table)
# 단계 4: 교차 테이블로 데이터프레임 생성
xy.df <- as.data.frame(table(x, y))
xy.df
# 단계 5: 좌표에 중복딘 수 만큼 점을 확대하기
plot(x, y,
pch = "@", col = "blue", cex = 0.5 * xy.df$Freq,
xlab = "x 벡터의 원소", ylab = "y 벡터 원소")
# 실습: galton 데이터 셋을 대상으로 중복된 자료 시각화하기
# 단계 1: galton 데이터셋 가져오기
library(UsingR)
# 실습: galton 데이터 셋을 대상으로 중복된 자료 시각화하기
# 단계 1: galton 데이터셋 가져오기
install.packages("UsingR")
library(UsingR)
data(galton)
# 단계 2: 교차테이블을 작성하고, 데이프레임으로 변환
galtonData <- as.data.frame(table(galton$child, galton$parent))
head(galtonData)
# 단계 3: 칼럼 단위 추출
names(galtonData) = c("child", "parent", "freq")
head(galtonData)
parent <- as.numeric(galtonData$parent)
child <- as.numeric(galtonData$child)
# 단계 4: 점의 크기 확대
par(mfrow = c(1, 1))
plot(parent, child,
pch = 21, col = "blue", bg = "green",
cex = 0.2 * galtonData$freq,
xlab = "parent", ylab = "child")
# 실습: iris 데이터 셋의 4개 변ㄴ수를 상호 비교
attributes(iris)
pairs(iris[iris$Species == "virginica", 1:4])
pairs(iris[iris$Species == "setosa", 1:4])
# 실습: 3차원으로 산점도 시각화하기
# 단계 1: 3차원 산점도를 위한 scatterplot3d 패키지 설치 및 로딩
install.packages("scatterplot3d")
library(scatterplot3d)
# 단계 2: 꽃의 종류별 분류
iris_setosa = iris[iris$Species == 'setosa', ]
iris_versicolor = iris[iris$Species == 'versicolor', ]
iris_virginica = iris[iris$Species == 'virginica', ]
# 단계 3: 3차원 틀 생성하기
d3 <- scatterplot3d(iris$Petal.Length,
iris$Sepal.Length,
iris$Sepal.Width,
type = 'n')
# 단계 4: 3차원 산점도 시각화
d3$points3d(iris_setosa$Petal.Length,
iris_setosa$Sepal.Length,
iris_setosa$Sepal.Width,
bg = 'orange', pch = 21)
d3$points3d(iris_versicolor$Petal.Length,
iris_versicolor$Sepal.Length,
iris_versicolor$Sepal.Width,
bg = 'blue', pch = 23)
d3$points3d(iris_virginica$Petal.Length,
iris_virginica$Sepal.Length,
iris_virginica$Sepal.Width,
bg = 'green', pch = 25)
# 실습: iris 데이터 셋을 대상으로 '%>%' 기호를 이용하여 함수 적용하기
install.packages("dplyr")
library(dplyr)
iris %>% head()
iris %>% head() %>% subset(Sepal.Length >= 5.0)
# 실습: dplyr 패키지와 hflight 데이터 셋 설치
install.packages(c("dplyr", "hflights"))
install.packages(c("dplyr", "hflights"))
library(dplyr)
library(hflights)
str(hflights)
# 실습: tbl_df() 함수 사용하기
hflights_df <- tbl_df(hflights)
hflights_df
# 실습: hflights_df를 대상으로 특정일의 데이터 추출하기
filter(hflights_df, Month == 1 & DayofMonth == 2)  # 1월 2일 데이터 추출
# 실습: hflights_df를 대상으로 지정된 월의 데이터 추출하기
filter(hflights_df, Month == 1 | Month == 2) # 1월 또는 2월 데이터 추출
# 실습: hflights_df를 대상으로 데이터 정렬하기
arrange(hflights_df, Year, Month, DepTime, ArrTime)
# 실습: hflights_df를 대상으로 지정된 칼럼 데이터 검색하기
select(hflights_df, Year, Month, DepTime, ArrTime)
# 실습: hflights_df를 대상으로 칼럼의 범위로 검색하기
select(hflights_df, Year:ArrTime)
# 실습: hflights_df에서 출발 지연시간과 도착 지연시간의 차이를 계산한 칼럼 추가하기
mutate(hflights_df, gain = ArrTime - DepTime,
gain_per_hour = gain / (AirTime / 60))
# 실습: mutate() 함수에 의해 추가된 칼럼 뵉
select(mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60)),
Year, Month, ArrDelay, DepDelay, gain, gain_per_hour)
# 실습: mutate() 함수에 의해 추가된 칼럼 뵉
select(mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60)),
Year, Month, ArrDelay, DepDelay, gain, gain_per_hour)
# 실습: hflights_df에서 비행시간의 평균 구하기
summarise(hflights_df, avgAirTime = mean(AirTime, na.rm = TRUE))
# 실습: hflights_df의 관측치 길이 구하기
summarise(hflights_df, cnt = n(),
delay = mean(AirTime, na.rm = TRUE))
# 실습: 도착시간(ArrTime)의 표준편차와 분산 계산하기
summarise(hflights_df, arrTimeSd = sd(ArrTime, na.rm = TRUE),
arrTimeVar = var(ArrTime, na.rm = T))
# 실습: 집단변수를 이용하여 그룹화하기
species <- group_by(iris, Species)
str(species)
species
# 실습: 공통변수를 이용하여 내부조인(inner_join)하기
# 단계 1: join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 2:6, z = rnorm(5))
df1
df2
# 단계 2: inner_join 하기
inner_join(df1, df2, by = 'x')
# 실습: 공통변수를 이용하여 왼쪽 조인(left_join)하기
left_join(df1, df2, by = 'x')
# 실습: 공통변수를 이용하여 오른쪽 조인(right_join)하기
right_join(df1, df2, by = 'x')
# 실습: 공통변수를 이용하여 전체 조인(full_join)하기
full_join(df1, df2, by = 'x')
# 실습: 두 개의 데이터프레임을 행 단위로 합치기
# 단계 1: 실습을 위한 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 6:10, y = rnorm(5))
df1
df2
# 단계 2: 데이터프레임 합치기
df_rows <- bind_rows(df1, df2)
df_rows
# 실습: 두 개의 데이터프레임을 열 단위로 합치기
df_cols <- bind_cols(df1, df2)
df_cols
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x2 = x1)
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x2 = x1)
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x2 = x...1)
df_rename <- rename(df_rename, y2 = y...1)
df_rename <- rename(df_rename, y2 = y...2)
df_rename
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x = x2)
df_cols
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x = x...1)
df_rename <-rename(df_cols, Y = y...2)
df_rename <-rename(df_cols, x2 = x...3)
df_rename <- rename(df_rename, y2 = y...4)
df_rename
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x = x...1)
df_rename <-rename(df_cols, Y = y...2)
df_rename
# 실습: reshape2 패키지 설치와 데이터 가져오기
install.packages("reshape2")
data <- read.csv("C:/Rwork/Part-II/data.csv")
data
library(reshape2)
# 실습: 넓은 형식(wide format)으로 변경하기
wide <- dcast(data, Customer_ID ~ Date, sum)
wide
# 실습: 파일 저장 및 읽기
setwd("C:/Rwork/Part-II")
write.csv(wide, "wide.csv", row.names = FALSE)
wide <- read.csv("wide.csv")
colnames(wide) <- c('Customer_ID', 'day1', 'day2', 'day3',
'day4', 'day5', 'day6', 'day7')
wide
# 실습: 넓은 형식의 데이터를 긴 형식으로 변경하기
# 단계 1: 데이터를 긴 형식으로 변경하기
long <- melt(wide, id = "Customer_ID")
long
# 단계 2: 칼럼명 변경하기
name <- c("Customer_ID", "Date","Buy")
colnames(long) <- name
head(long)
# 실습: smiths 데이터 셋 확인하기
# 단계 1: smiths 데이터 셋 가져오기
data("smiths")
smiths
# 단계 2: 넓은 형식의 smiths 데이터 셋을 긴 형식으로 변경
long <- melt(id = 1:2, smiths)
long
# 단계 3: 긴 형식을 넓은형식으로 변경하기
dcast(long, subject + time ~ ...)
# 단계 1: airquality 데이터 셋 가져오기
data('airquality')
str(airquality)
airquality
# 단계 2: 칼럼 제목을 대문자로 일괄 변경하기
names(airquality) <- toupper(names(airquality))
head(airquality)
# 단계 3: melt() 함수를 이용하여 넓은 형식을 긴 형식으로 변경하기
air_melt <- melt(airquality, id = c("MONTH", "DAY"), na.rm = TRUE)
head(air_melt)
air_melt
# 단계 4: acast() 함수를 이용하여 3차원으로 구조 변경하기
names(air_melt) <- tolower(names(air_melt))
acast <- acast(air_melt, day ~ month ~ variable)
acast
class(acast)
# 단계 5: 집합함수 적용하기
acast(air_melt, month ~ variable, sum, margins = TRUE)
getsw()
getwd()
acc = read_csv(path = "03_치매환자현황.csv")
acc = read_csv(path = "03_치매환자현황.csv", fileEncoding = "euc-kr")
acc = read.csv(path = "03_치매환자현황.csv", fileEncoding = "euc-kr")
acc = read.csv(file = "03_치매환자현황.csv", fileEncoding = "euc-kr")
df = read.csv(file = "03_치매환자현황.csv", fileEncoding = "euc-kr")
df <- read.csv(file = "03_치매환자현황.csv", fileEncoding = "euc-kr")
setwd("C:/Rwork/03")
df <- read.csv(file = "03_치매환자현황.csv", fileEncoding = "euc-kr")
df
df$진단일수 <- df$데이터기준일자-df$진단일자
df$진단일수 <- df$데이터기준일자-df$진단일자
type(df$데이터기준일자)
mode(df$데이터기준일자)
df$진단일수 <- as.numeric(df$데이터기준일자)-as.numeric(df$진단일자)
df
df$진단일수 <- as.Date(df$데이터기준일자)-as.Date(df$진단일자)
df
mean(df$진단일수)
mean(as.numeric(df$진단일수))
barplot(as.factor(df$거주지역))
barplot(table(as.factor(df$거주지역))
barplot(table(as.factor(df$거주지역))
dfFact=table(as.factor(df$거주지역)
df$거주지역=as.factor(df$거주지역)
barplot(table(df$거주지역)
barplot(table(df$거주지역))
barplot(table(df$거주지역))
mean(as.integer(df$진단일수))
df
df$나이 <- substring(df$진단일자,1,4)
ㅇㄹㄹ
df
df$나이 <- as.integer(substring(df$진단일자,1,4)) - df$출생년도
df
table(df$나이)
cut(df$나이, breaks = 10, labels = paste0(1:5, '나이대'))
cut(df$나이, breaks = 10, labels = paste0(1:10, '나이대'))
cut(df$나이, breaks = 7, labels = paste0(40:90, '나이대'))
cut(df$나이, breaks = c(40:90))
cut(df$나이, breaks = c(40,50,60,70,80,90))
cut(df$나이, breaks = c([40,50,60,70,80,90]))
cut(df$나이, breaks = c(40,50,60,70,80,90))
table(cut(df$나이, breaks = c(40,50,60,70,80,90)))
barplot(table(cut(df$나이, breaks = c(40,50,60,70,80,90))))
barplot(table(cut(df$나이, breaks = c(40,50,60,70,80,90,100))))
ifelse(df$나이<90,"80대","90대"))))
ifelse(df$나이<90,"80대","90대")))
df$나이대 <- ifelse(df$나이<50, "40대",
ifelse(df$나이<60, "50대",
ifelse(df$나이<70, "60대",
ifelse(df$나이<80,"70대",
ifelse(df$나이<90,"80대","90대")))
))
df$나이대 <- ifelse(df$나이<50, "40대",
ifelse(df$나이<60, "50대",
ifelse(df$나이<70, "60대",
ifelse(df$나이<80,"70대",
ifelse(df$나이<90,"80대","90대")))
))
df$나이대 <- ifelse(df$나이<50, "40대",
ifelse(df$나이<60, "50대",
ifelse(df$나이<70, "60대",
ifelse(df$나이<80,"70대",
ifelse(df$나이<90,"80대","90대")))))
df
table(df$나이대)
barplot(table(df$나이대))
df$나이대 <- paste(df$나이/10, "대", sep="")
df
df$나이대 <- paste(df$나이//10, "대", sep="")
df$나이대 <- paste(df$나이%/%10, "대", sep="")
df
df$나이대 <- paste((df$나이%/%10)*10, "대", sep="")
df
barplot(table(df$나이대))
df$나이대 <- ifelse() paste(ifelse((df$나이%/%10)*10>=100,90,(df$나이%/%10)*10)), "대", sep="")
df$나이대 <- ifelse() paste(ifelse((df$나이%/%10)*10>=100,"90",(df$나이%/%10)*10)), "대", sep="")
df$나이대 <- paste(ifelse((df$나이%/%10)*10>=100,90,(df$나이%/%10)*10)), "대", sep="")
df$나이대 <- paste(ifelse((df$나이%/%10)*10>=100,90,(df$나이%/%10)*10), "대", sep="")
df
barplot(table(df$나이대))
table(df$나이대)
min(df$나이이)
min(df$나이)
df <- read.csv(file = "03_암발생자수_.csv", fileEncoding = "euc-kr")
df
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
names(df)
df$연령별 <- as.factor(df$연령별)
table(df$연령별)
table(df$연령별, df$X2019)
table(df$연령별)
names(df)
filter(df, df$X24개.암종별 == "모든 암(C00-C96)")
dfAll <- filter(df, df$X24개.암종별 == "모든 암(C00-C96)")
names(df)
df$연령별
dfAll$new연령별 <- substring(dfAll$연령별,1)
dfAll
dfAll$new연령별 <- substring(dfAll$연령별,1,1)
dfAll
dfAge30 <- group_by(dfAll, dfAll$new연령별<=3)
dfAge30
dfAge30 <- group_by(dfAll, dfAll$new연령별<=3)
dfAge30
dfAll
df <- read.csv(file = "03_암발생자수_.csv", fileEncoding = "euc-kr")
df
df$연령별
dfAll <- filter(df, df$X24개.암종별 == "모든 암(C00-C96)")
dfAll
dfAll$new연령별 <- strsplit(dfAll$연령별,"-")[1]
dfAll
dfAll$new연령별 <- strsplit(dfAll$연령별,"-")[2]
dfAll
dfAll$new연령별 <- strsplit(dfAll$연령별,"-")
dfAll
dfAll[2]
dfAll[6]
mode(dfAll[6])
mode(dfAll[6][1])
dfAll[6][1]
dfAll[6]
dfAll[6:1]
dfAll[6,]
dfAll[:1]
dfAll[,1]
dfAll
dfAll$new연령별
dfAll$new연령별[1]
dfAll$new연령별[2]
dfAll$new연령별[2:1]
dfAll$new연령별[2,1]
dfAll$new연령별[2]
dfAll$new연령별[[]][1]
dfAll$new연령별[[1]]
dfAll$new연령별[[2]]
dfAll$new연령별[[2]][1]
df <- read.csv(file = "03_암발생자수_.csv", fileEncoding = "euc-kr")
df
install.packages("dplyr")
df$연령별
dfAll <- filter(df, df$X24개.암종별 == "모든 암(C00-C96)")
dfAll$new연령별 <- strsplit(dfAll$연령별,"-")
df <- read.csv(file = "03_암발생자수_.csv", fileEncoding = "euc-kr")
df
dfAll <- filter(df, df$X24개.암종별 == "모든 암(C00-C96)")
dfAll
dfAge <- group_by(dfAll, dfAll$연령별)
dfAge
dfAge <- group_by(dfAll, dfAll$성별)
dfAge
table(df$나이대)
table(df$연령별)
dfAge30 <- group_by(dfAll, dfAll$연령별=="0-4세"|"10-14세"|"15-19세"|"20-24세"|"25-29세")
dfAge
dfAge30 <- group_by(dfAll, dfAll$연령별=="0-4세"|"10-14세"|"15-19세"|"20-24세"|"25-29세")
dfAge30 <- group_by(dfAll, dfAll$연령별=="0-4세"|
dfAll$연령별=="10-14세"|
dfAll$연령별=="15-19세"|
dfAll$연령별=="20-24세"|
dfAll$연령별=="25-29세")
dfAge
dfAge30
dfAll$연령별<-as.factor(dfAll$연령별)
dfAge30 <- group_by(dfAll, dfAll$연령별=="0-4세"|
dfAll$연령별=="10-14세"|
dfAll$연령별=="15-19세"|
dfAll$연령별=="20-24세"|
dfAll$연령별=="25-29세")
dfAge30
dfAll<- data.frame(dfAll)
dfAge30 <- group_by(dfAll, dfAll$연령별=="0-4세"|
dfAll$연령별=="10-14세"|
dfAll$연령별=="15-19세"|
dfAll$연령별=="20-24세"|
dfAll$연령별=="25-29세")
dfAge30
dfAge30 <- group_by(dfAll, dfAll$연령별=="0-4세"|
dfAll$연령별=="5-9세"|
dfAll$연령별=="10-14세"|
dfAll$연령별=="15-19세"|
dfAll$연령별=="20-24세"|
dfAll$연령별=="25-29세")
dfAge30
df <- read.csv(file = "03_암발생자수_.csv", header=T, stringsAsFactors = F, fileEncoding = "euc-kr")
df
names(df)
df <- read.csv(file = "03_암발생자수_.csv", headers=T, stringsAsFactors = F, fileEncoding = "euc-kr")
df <- read.csv(file = "03_암발생자수_.csv", header=T, stringsAsFactors = F, fileEncoding = "euc-kr")
df
names(df)
View(df)
View(df)
names(df) <- c("암종별", "성별","연령별","2019","2019.1")
df
df2<- subset(df,df$암종별 == "모든 암(C00-C96)")
df2
df22 <- df2 %>% filter("모든 암(C00-C96)")
df22
df22 <- df2 %>% filter("모든 암(C00-C96)")
df22 <- df2 %>% filter(df$암종별 == "모든 암(C00-C96)")
df22 <- df2 %>% filter(df2$암종별 == "모든 암(C00-C96)")
df22
df %>% filter(연령별 %in% c("계", "연령미상"))
df %>% filter(!(연령별 %in% c("계", "연령미상")))
df22 <- df2 %>% filter(df2$암종별 == "모든 암(C00-C96)" & !(연령별 %in% c("계", "연령미상")))
df22
unique(df22$연령별)
df22$연령대 <- ifelse(df22$연령대 %in% c("0-4세","5-9세", "10-14세", "15-19세",
"20-24세", "25-29세","30-34세", "35-39세"),"30대이하",
ifelse(df22$연령대 %in% c("40-44세","45-49세","50-54세","55-59세"), "40~50대",
ifelse(df22$연령대 %in% c("60-64세","65-69세","70-74세","75-79세"),"60~70대","80대이상")))
df22$연령대 <- ifelse(df22$연령별 %in% c("0-4세","5-9세", "10-14세", "15-19세",
"20-24세", "25-29세","30-34세", "35-39세"),"30대이하",
ifelse(df22$연령대 %in% c("40-44세","45-49세","50-54세","55-59세"), "40~50대",
ifelse(df22$연령대 %in% c("60-64세","65-69세","70-74세","75-79세"),"60~70대","80대이상")))
df22
df22
df22$연령대 <- ifelse(df22$연령별 %in% c("0-4세","5-9세", "10-14세", "15-19세",
"20-24세", "25-29세","30-34세", "35-39세"),"30대이하",
ifelse(df22$연령별 %in% c("40-44세","45-49세","50-54세","55-59세"), "40~50대",
ifelse(df22$연령별 %in% c("60-64세","65-69세","70-74세","75-79세"),"60~70대","80대이상")))
df22
qplot(연령대, data=df22, fill="성별")+
ggtitle("연령별 성별")+
theme(plot.title = element_text(hjust=0.5, size=20, face="bold"))
install.packages(qplot)
install.packages("qplot")
library("qplot")
library("qplot")
qplot(연령대, data=df22, fill="성별")+
ggtitle("연령별 성별")+
theme(plot.title = element_text(hjust=0.5, size=20, face="bold"))
install.packages("qplot")
library("qplot")
ggplot(mapping =aes(x=연령대, y=계, fill=성별), data=df22) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("연령대별 성별 분석")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
install.packages("ggplot")
library("qplot")
install.packages("ggplot")
install.packages("ggplot2")
library("ggplot2")
ggplot(mapping =aes(x=연령대, y=계, fill=성별), data=df22) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("연령대별 성별 분석")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
df22
ggplot(mapping =aes(x=연령대, y=2019, fill=성별), data=df22) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("연령대별 성별 분석")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(mapping =aes(x=연령대, y="2019", fill=성별), data=df22) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("연령대별 성별 분석")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
df22
names(df22)
install.packages("qplot2")
qplot(연령대, data=df22, fill="성별")+
ggtitle("연령별 성별")+
theme(plot.title = element_text(hjust=0.5, size=20, face="bold"))
df22g <- df22 %>% group_by(연령대, 계 = sum(2019))
df22g
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum(`2019`))
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum("2019"))
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum(`2019`))
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum(df$`2019`))
names(df22)
names(df22)  <- c("암종별", "성별","연령별", "y2019","y2019.1", "연령대")
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum(df$`2019`))
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum(y2019))
class(df22)
class(df22$y2019)
df22$y2019 <- as.numeric(df22$y2019)
df22g <- df22 %>% group_by(연령대, 성별) %>% summarise(계 = sum(y2019))
df22g
ggplot(mapping =aes(x=연령대, y=, fill=성별), data=df22g) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("연령대별 성별 분석")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
ggplot(mapping =aes(x=연령대, y=계, fill=성별), data=df22g) +
geom_bar(stat="identity", position=position_dodge()) +
ggtitle("연령대별 성별 분석")+
theme(plot.title = element_text(hjust = 0.5,size=20,face='bold'))
